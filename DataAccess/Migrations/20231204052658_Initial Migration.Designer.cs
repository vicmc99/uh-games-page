// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231204052658_Initial Migration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("ComposedTeamComposedTeamsEvent", b =>
                {
                    b.Property<int>("ComposedTeamsEventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ComposedTeamsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ComposedTeamsEventId", "ComposedTeamsId");

                    b.HasIndex("ComposedTeamsId");

                    b.ToTable("ComposedTeamComposedTeamsEvent");
                });

            modelBuilder.Entity("Data.Model.Athlete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nick")
                        .HasColumnType("TEXT");

                    b.Property<string>("Photo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("Data.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Data.Model.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModalityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ModalityId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Data.Model.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("SportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("Data.Model.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Events");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Event");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Data.Model.EventTeamSubstitute", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubstituteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventId", "TeamId", "SubstituteId");

                    b.HasIndex("SubstituteId");

                    b.HasIndex("TeamId");

                    b.ToTable("EventSubstitutes");
                });

            modelBuilder.Entity("Data.Model.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Acronym")
                        .HasColumnType("TEXT");

                    b.Property<string>("Logo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mascot")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("Data.Model.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeagueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Round")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Data.Model.GroupEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupEvents");
                });

            modelBuilder.Entity("Data.Model.GroupLine", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AthleteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Round")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Statistics")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("GroupId", "TeamId", "AthleteId");

                    b.HasIndex("AthleteId");

                    b.HasIndex("TeamId");

                    b.ToTable("GroupLines");
                });

            modelBuilder.Entity("Data.Model.Leaderboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Leaderboards");
                });

            modelBuilder.Entity("Data.Model.LeaderboardLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BronzeMedals")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FacultyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GoldMedals")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LeaderboardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ranking")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SilverMedals")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("LeaderboardId");

                    b.ToTable("LeaderboardLines");
                });

            modelBuilder.Entity("Data.Model.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rounds")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("Data.Model.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("GoogleMapsURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Data.Model.Major", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FacultyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Years")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Majors");
                });

            modelBuilder.Entity("Data.Model.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EventId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Data.Model.Modality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sex")
                        .HasColumnType("TEXT");

                    b.Property<int>("SportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("SportId");

                    b.ToTable("Modalities");
                });

            modelBuilder.Entity("Data.Model.ParticipantScoredEventSubstitute", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubstituteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParticipantScoredEventId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventId", "TeamId", "SubstituteId");

                    b.HasIndex("ParticipantScoredEventId");

                    b.HasIndex("SubstituteId");

                    b.HasIndex("TeamId");

                    b.ToTable("ParticipantScoredEventSubstitutes");
                });

            modelBuilder.Entity("Data.Model.Representative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AthleteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FacultyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MajorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("MajorId");

                    b.ToTable("Representatives");
                });

            modelBuilder.Entity("Data.Model.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("NumberScore")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("Data.Model.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pictogram")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rules")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("Data.Model.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FacultyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Teams");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Team");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Data.Model.TeamComposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ComposedTeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ComposedTeamId");

                    b.ToTable("TeamCompositions");
                });

            modelBuilder.Entity("Data.Model.TeamCompositionScore", b =>
                {
                    b.Property<int>("CompositionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScoreId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EventId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CompositionId", "ScoreId");

                    b.HasIndex("EventId");

                    b.HasIndex("ScoreId")
                        .IsUnique();

                    b.ToTable("TeamCompositionScores");
                });

            modelBuilder.Entity("Data.Model.TeamEventParticipant", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventId", "TeamId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TeamId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("Data.Model.TeamEventScore", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScoreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeamId", "EventId", "ScoreId");

                    b.HasIndex("EventId");

                    b.HasIndex("ScoreId")
                        .IsUnique();

                    b.ToTable("TeamScores");
                });

            modelBuilder.Entity("Data.Model.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AthleteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NormalTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.HasIndex("NormalTeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("Data.Model.TeamParticipantScore", b =>
                {
                    b.Property<int>("ParticipantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScoreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParticipantId", "EventId", "ScoreId", "TeamId");

                    b.HasIndex("EventId");

                    b.HasIndex("MatchId");

                    b.HasIndex("ParticipantId")
                        .IsUnique();

                    b.HasIndex("ScoreId")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.ToTable("TeamParticipantScores");
                });

            modelBuilder.Entity("Data.Model.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("Data.Model.TournamentEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Round")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TournamentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentEvents");
                });

            modelBuilder.Entity("LeagueLocation", b =>
                {
                    b.Property<int>("LeagueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LeagueId", "LocationsId");

                    b.HasIndex("LocationsId");

                    b.ToTable("LeagueLocation");
                });

            modelBuilder.Entity("LocationTournament", b =>
                {
                    b.Property<int>("LocationsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TournamentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LocationsId", "TournamentId");

                    b.HasIndex("TournamentId");

                    b.ToTable("LocationTournament");
                });

            modelBuilder.Entity("MatchEventNormalTeam", b =>
                {
                    b.Property<int>("MatchEventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MatchedTeamsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MatchEventId", "MatchedTeamsId");

                    b.HasIndex("MatchedTeamsId");

                    b.ToTable("MatchEventNormalTeam");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NormalTeamParticipantScoredEvent", b =>
                {
                    b.Property<int>("ParticipantScoredEventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParticipantScoredTeamsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParticipantScoredEventId", "ParticipantScoredTeamsId");

                    b.HasIndex("ParticipantScoredTeamsId");

                    b.ToTable("NormalTeamParticipantScoredEvent");
                });

            modelBuilder.Entity("TeamCompositionTeamMember", b =>
                {
                    b.Property<int>("ParticipantsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamCompositionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParticipantsId", "TeamCompositionId");

                    b.HasIndex("TeamCompositionId");

                    b.ToTable("TeamCompositionTeamMember");
                });

            modelBuilder.Entity("Data.Model.ComposedTeamsEvent", b =>
                {
                    b.HasBaseType("Data.Model.Event");

                    b.HasDiscriminator().HasValue("ComposedTeamsEvent");
                });

            modelBuilder.Entity("Data.Model.MatchEvent", b =>
                {
                    b.HasBaseType("Data.Model.Event");

                    b.HasDiscriminator().HasValue("MatchEvent");
                });

            modelBuilder.Entity("Data.Model.ParticipantScoredEvent", b =>
                {
                    b.HasBaseType("Data.Model.Event");

                    b.HasDiscriminator().HasValue("ParticipantScoredEvent");
                });

            modelBuilder.Entity("Data.Model.TeamEvent", b =>
                {
                    b.HasBaseType("Data.Model.Event");

                    b.HasDiscriminator().HasValue("TeamEvent");
                });

            modelBuilder.Entity("Data.Model.ComposedTeam", b =>
                {
                    b.HasBaseType("Data.Model.Team");

                    b.HasDiscriminator().HasValue("ComposedTeam");
                });

            modelBuilder.Entity("Data.Model.NormalTeam", b =>
                {
                    b.HasBaseType("Data.Model.Team");

                    b.HasDiscriminator().HasValue("NormalTeam");
                });

            modelBuilder.Entity("ComposedTeamComposedTeamsEvent", b =>
                {
                    b.HasOne("Data.Model.ComposedTeamsEvent", null)
                        .WithMany()
                        .HasForeignKey("ComposedTeamsEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.ComposedTeam", null)
                        .WithMany()
                        .HasForeignKey("ComposedTeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Model.Competition", b =>
                {
                    b.HasOne("Data.Model.Modality", "Modality")
                        .WithMany()
                        .HasForeignKey("ModalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modality");
                });

            modelBuilder.Entity("Data.Model.Discipline", b =>
                {
                    b.HasOne("Data.Model.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Data.Model.Event", b =>
                {
                    b.HasOne("Data.Model.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Data.Model.EventTeamSubstitute", b =>
                {
                    b.HasOne("Data.Model.TeamEvent", "Event")
                        .WithMany("TeamSubstitutes")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.TeamMember", "Substitute")
                        .WithMany()
                        .HasForeignKey("SubstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.NormalTeam", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Substitute");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Data.Model.Group", b =>
                {
                    b.HasOne("Data.Model.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("Data.Model.GroupEvent", b =>
                {
                    b.HasOne("Data.Model.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Data.Model.GroupLine", b =>
                {
                    b.HasOne("Data.Model.Athlete", "Athlete")
                        .WithMany()
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");

                    b.Navigation("Group");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Data.Model.LeaderboardLine", b =>
                {
                    b.HasOne("Data.Model.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Leaderboard", null)
                        .WithMany("LeaderboardLines")
                        .HasForeignKey("LeaderboardId");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Data.Model.Major", b =>
                {
                    b.HasOne("Data.Model.Faculty", "Faculty")
                        .WithMany("Majors")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Data.Model.Match", b =>
                {
                    b.HasOne("Data.Model.MatchEvent", null)
                        .WithMany("Matches")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("Data.Model.Modality", b =>
                {
                    b.HasOne("Data.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Discipline");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Data.Model.ParticipantScoredEventSubstitute", b =>
                {
                    b.HasOne("Data.Model.ParticipantScoredEvent", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.ParticipantScoredEvent", null)
                        .WithMany("TeamSubstitutes")
                        .HasForeignKey("ParticipantScoredEventId");

                    b.HasOne("Data.Model.TeamMember", "Substitute")
                        .WithMany()
                        .HasForeignKey("SubstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.NormalTeam", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Substitute");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Data.Model.Representative", b =>
                {
                    b.HasOne("Data.Model.Athlete", "Athlete")
                        .WithMany()
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Faculty", "Faculty")
                        .WithMany("Representatives")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Major", "Major")
                        .WithMany()
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");

                    b.Navigation("Faculty");

                    b.Navigation("Major");
                });

            modelBuilder.Entity("Data.Model.Sport", b =>
                {
                    b.HasOne("Data.Model.Category", null)
                        .WithMany("Sports")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("Data.Model.Team", b =>
                {
                    b.HasOne("Data.Model.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Data.Model.TeamComposition", b =>
                {
                    b.HasOne("Data.Model.ComposedTeam", null)
                        .WithMany("Compositions")
                        .HasForeignKey("ComposedTeamId");
                });

            modelBuilder.Entity("Data.Model.TeamCompositionScore", b =>
                {
                    b.HasOne("Data.Model.TeamComposition", "Composition")
                        .WithMany()
                        .HasForeignKey("CompositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.ComposedTeamsEvent", null)
                        .WithMany("ComposedTeamScores")
                        .HasForeignKey("EventId");

                    b.HasOne("Data.Model.Score", "Score")
                        .WithOne()
                        .HasForeignKey("Data.Model.TeamCompositionScore", "ScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Composition");

                    b.Navigation("Score");
                });

            modelBuilder.Entity("Data.Model.TeamEventParticipant", b =>
                {
                    b.HasOne("Data.Model.TeamEvent", "Event")
                        .WithMany("TeamParticipants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.TeamMember", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.NormalTeam", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Participant");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Data.Model.TeamEventScore", b =>
                {
                    b.HasOne("Data.Model.TeamEvent", "Event")
                        .WithMany("TeamScores")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Score", "Score")
                        .WithOne()
                        .HasForeignKey("Data.Model.TeamEventScore", "ScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.NormalTeam", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Score");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Data.Model.TeamMember", b =>
                {
                    b.HasOne("Data.Model.Athlete", "Athlete")
                        .WithMany()
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.NormalTeam", null)
                        .WithMany("Members")
                        .HasForeignKey("NormalTeamId");

                    b.HasOne("Data.Model.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Data.Model.TeamParticipantScore", b =>
                {
                    b.HasOne("Data.Model.ParticipantScoredEvent", "Event")
                        .WithMany("ParticipantScores")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Match", null)
                        .WithMany("ParticipantScores")
                        .HasForeignKey("MatchId");

                    b.HasOne("Data.Model.TeamMember", "Participant")
                        .WithOne()
                        .HasForeignKey("Data.Model.TeamParticipantScore", "ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Score", "Score")
                        .WithOne()
                        .HasForeignKey("Data.Model.TeamParticipantScore", "ScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.NormalTeam", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Participant");

                    b.Navigation("Score");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Data.Model.TournamentEvent", b =>
                {
                    b.HasOne("Data.Model.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("LeagueLocation", b =>
                {
                    b.HasOne("Data.Model.League", null)
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationTournament", b =>
                {
                    b.HasOne("Data.Model.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchEventNormalTeam", b =>
                {
                    b.HasOne("Data.Model.MatchEvent", null)
                        .WithMany()
                        .HasForeignKey("MatchEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.NormalTeam", null)
                        .WithMany()
                        .HasForeignKey("MatchedTeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NormalTeamParticipantScoredEvent", b =>
                {
                    b.HasOne("Data.Model.ParticipantScoredEvent", null)
                        .WithMany()
                        .HasForeignKey("ParticipantScoredEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.NormalTeam", null)
                        .WithMany()
                        .HasForeignKey("ParticipantScoredTeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamCompositionTeamMember", b =>
                {
                    b.HasOne("Data.Model.TeamMember", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Model.TeamComposition", null)
                        .WithMany()
                        .HasForeignKey("TeamCompositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Model.Category", b =>
                {
                    b.Navigation("Sports");
                });

            modelBuilder.Entity("Data.Model.Faculty", b =>
                {
                    b.Navigation("Majors");

                    b.Navigation("Representatives");
                });

            modelBuilder.Entity("Data.Model.Leaderboard", b =>
                {
                    b.Navigation("LeaderboardLines");
                });

            modelBuilder.Entity("Data.Model.Match", b =>
                {
                    b.Navigation("ParticipantScores");
                });

            modelBuilder.Entity("Data.Model.ComposedTeamsEvent", b =>
                {
                    b.Navigation("ComposedTeamScores");
                });

            modelBuilder.Entity("Data.Model.MatchEvent", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Data.Model.ParticipantScoredEvent", b =>
                {
                    b.Navigation("ParticipantScores");

                    b.Navigation("TeamSubstitutes");
                });

            modelBuilder.Entity("Data.Model.TeamEvent", b =>
                {
                    b.Navigation("TeamParticipants");

                    b.Navigation("TeamScores");

                    b.Navigation("TeamSubstitutes");
                });

            modelBuilder.Entity("Data.Model.ComposedTeam", b =>
                {
                    b.Navigation("Compositions");
                });

            modelBuilder.Entity("Data.Model.NormalTeam", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
